import os
import re
from typing import List, Tuple

import pandas as pd


INPUT_PATH = "/Users/leosgambato/Documents/GitHub/Capstone/data/external/Data/nd_gain_countryindex_2025/resources/vulnerability/vulnerability.csv"
OUTPUT_MONTHLY = "/Users/leosgambato/Documents/GitHub/Capstone/data/processed/vulnerability_monthly.csv"
OUTPUT_DIR = "/Users/leosgambato/Documents/GitHub/Capstone/data/processed"


def get_allowed_iso3_from_cpi(cpi_path: str) -> List[str]:
    df = pd.read_csv(cpi_path)
    return sorted(df["iso3"].unique())


def select_year_columns(columns: List[str], start_year: int = 1990, end_year: int = 2025) -> List[str]:
    years: List[str] = []
    for col in columns:
        if re.fullmatch(r"\d{4}", str(col)):
            y = int(col)
            if start_year <= y <= end_year:
                years.append(col)
    return years


def expand_annual_to_monthly(df: pd.DataFrame, value_col: str) -> pd.DataFrame:
    df = df.copy()
    df["Date"] = pd.to_datetime(df["Date"], errors="coerce")
    df = df.dropna(subset=["Date"])

    records: List[Tuple[str, str, float]] = []
    for iso3, date, val in df[["iso3", "Date", value_col]].itertuples(index=False):
        year = date.year
        for month in range(1, 13):
            month_date = pd.Timestamp(year=year, month=month, day=1)
            records.append((iso3, month_date.date().isoformat(), float(val)))

    out = pd.DataFrame(records, columns=["iso3", "Date", value_col])
    # Keep within 1990-01 to 2025-12
    out = out[(out["Date"] >= "1990-01-01") & (out["Date"] <= "2025-12-01")]
    return out.sort_values(["iso3", "Date"]).reset_index(drop=True)


def main() -> None:
    df = pd.read_csv(INPUT_PATH)

    # Determine available year columns and restrict to 1990â€“2025
    year_cols = select_year_columns(list(df.columns))
    if not year_cols:
        raise RuntimeError("No year columns found in vulnerability file")

    # Restrict to CPI coverage
    allowed_iso3 = set(get_allowed_iso3_from_cpi(os.path.join(OUTPUT_DIR, "cpi_cleaned.csv")))
    df["iso3"] = df["ISO3"].astype(str).str.upper()
    df = df[df["iso3"].isin(allowed_iso3)].copy()

    # Melt to long annual
    long_df = df.melt(id_vars=["iso3"], value_vars=year_cols, var_name="year", value_name="vulnerability")
    long_df["vulnerability"] = pd.to_numeric(long_df["vulnerability"], errors="coerce")
    long_df = long_df.dropna(subset=["vulnerability"]).copy()

    # Build annual Date
    long_df["Date"] = pd.to_datetime(long_df["year"].astype(int).astype(str) + "-01-01").dt.date.astype(str)
    annual_df = long_df[["iso3", "Date", "vulnerability"]].sort_values(["iso3", "Date"]).reset_index(drop=True)

    # Expand to monthly step function
    monthly_df = expand_annual_to_monthly(annual_df, "vulnerability")

    os.makedirs(OUTPUT_DIR, exist_ok=True)
    monthly_df.to_csv(OUTPUT_MONTHLY, index=False)
    print(f"Wrote {len(monthly_df):,} rows to {OUTPUT_MONTHLY}")


if __name__ == "__main__":
    main()


